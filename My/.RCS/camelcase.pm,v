head	1.8;
access;
symbols;
locks
	eb:1.8; strict;
comment	@# @;
expand	@o@;


1.8
date	2015.02.09.03.19.52;	author eb;	state Exp;
branches;
next	1.7;

1.7
date	2015.02.09.03.18.15;	author eb;	state Exp;
branches;
next	1.6;

1.6
date	2015.01.22.06.47.04;	author eb;	state Exp;
branches;
next	1.5;

1.5
date	2015.01.18.19.08.18;	author eb;	state Exp;
branches;
next	1.4;

1.4
date	2015.01.18.19.07.58;	author eb;	state Exp;
branches;
next	1.3;

1.3
date	2015.01.18.19.06.27;	author eb;	state Exp;
branches;
next	1.2;

1.2
date	2015.01.18.19.05.47;	author eb;	state Exp;
branches;
next	1.1;

1.1
date	2015.01.18.07.53.27;	author eb;	state Exp;
branches;
next	;


desc
@vim
@


1.8
log
@vim
@
text
@use 5.20.1;
use Data::Printer;
use List::MoreUtils;

# Camel-case test
sub camelcase {

    my ( $source, $target, $results, $number ) = @@_;

    # Extendible list of exclusions:
    
    my $ea = each_arrayref( $source, $target, $number );
    while ( my ( $source, $target, $number ) = $ea->() ) {
        my @@source = split( ' ', $source );

        for my $word (@@source) {
            if ( $source =~ /(\w{3,})/g ) {
                my $smatch = $1;
                if ( $target =~ /($smatch)/i ) {
                    my $tmatch = $1;
                    if (   ( $smatch !~ /$tmatch/ )
                        && not( $tmatch =~ /^[A-Z]+$/ )
                        && not( $smatch =~ /^[A-Z]+$/ ) )
                    {
                        my ( $smatch_trunc, $tmatch_trunc );
                        ( $smatch_trunc = $smatch ) =~ s/^.//;
                        ( $tmatch_trunc = $tmatch ) =~ s/^.//;
                        if ( $tmatch_trunc !~ $smatch_trunc ) {
                            say "<p>$smatch and $tmatch<br>\n";
                            say "$source<br>\n$target<br>\n</p>";
                        }
                    }
                }
            }
        }
    }
}
1;
@


1.7
log
@vim
@
text
@d29 2
a30 2
                            say "$smatch and $tmatch<br>\n";
                            say "$source<br>\n$target<br>";
@


1.6
log
@vim
@
text
@d29 2
a30 3
                            say "but the capitalization differs";
                            say "$smatch and $tmatch\n";
                            say "$source\n$target";
@


1.5
log
@vim
@
text
@a21 1
                     #   && ( $tmatch !~ /_|\<|\>/ )
@


1.4
log
@vim
@
text
@d17 1
a17 1
            if ( $source =~ /(\w{3,})/ ) {
@


1.3
log
@vim
@
text
@d14 1
a14 1
        my @@source2 = split( ' ', $source );
d16 1
a16 1
        for my $word (@@source2) {
@


1.2
log
@vim
@
text
@d22 1
a22 1
                        && ( $tmatch !~ /_|\<|\>/ )
@


1.1
log
@vim
@
text
@d14 1
a14 1
        my @@source = split( ' ', $source );
d16 1
a16 1
        for my $word (@@source) {
@
