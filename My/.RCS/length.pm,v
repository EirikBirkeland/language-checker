head	1.26;
access;
symbols;
locks
	eb:1.26; strict;
comment	@# @;
expand	@o@;


1.26
date	2015.02.10.01.09.29;	author eb;	state Exp;
branches;
next	1.25;

1.25
date	2015.02.09.16.11.17;	author eb;	state Exp;
branches;
next	1.24;

1.24
date	2015.02.09.16.11.13;	author eb;	state Exp;
branches;
next	1.23;

1.23
date	2015.02.09.02.41.13;	author eb;	state Exp;
branches;
next	1.22;

1.22
date	2015.02.09.02.40.21;	author eb;	state Exp;
branches;
next	1.21;

1.21
date	2015.02.09.02.36.48;	author eb;	state Exp;
branches;
next	1.20;

1.20
date	2015.02.09.02.36.01;	author eb;	state Exp;
branches;
next	1.19;

1.19
date	2015.02.09.02.35.42;	author eb;	state Exp;
branches;
next	1.18;

1.18
date	2015.02.09.02.26.06;	author eb;	state Exp;
branches;
next	1.17;

1.17
date	2015.02.09.02.25.25;	author eb;	state Exp;
branches;
next	1.16;

1.16
date	2015.02.09.02.23.52;	author eb;	state Exp;
branches;
next	1.15;

1.15
date	2015.02.09.02.22.59;	author eb;	state Exp;
branches;
next	1.14;

1.14
date	2015.02.09.02.22.56;	author eb;	state Exp;
branches;
next	1.13;

1.13
date	2015.02.09.02.22.34;	author eb;	state Exp;
branches;
next	1.12;

1.12
date	2015.02.09.02.21.53;	author eb;	state Exp;
branches;
next	1.11;

1.11
date	2015.02.09.02.18.23;	author eb;	state Exp;
branches;
next	1.10;

1.10
date	2015.02.09.02.09.41;	author eb;	state Exp;
branches;
next	1.9;

1.9
date	2015.02.09.02.00.59;	author eb;	state Exp;
branches;
next	1.8;

1.8
date	2015.02.09.02.00.56;	author eb;	state Exp;
branches;
next	1.7;

1.7
date	2015.02.09.01.58.53;	author eb;	state Exp;
branches;
next	1.6;

1.6
date	2015.02.09.01.58.15;	author eb;	state Exp;
branches;
next	1.5;

1.5
date	2015.01.22.06.50.49;	author eb;	state Exp;
branches;
next	1.4;

1.4
date	2015.01.22.06.50.06;	author eb;	state Exp;
branches;
next	1.3;

1.3
date	2015.01.22.06.49.23;	author eb;	state Exp;
branches;
next	1.2;

1.2
date	2015.01.22.06.49.19;	author eb;	state Exp;
branches;
next	1.1;

1.1
date	2015.01.10.01.20.49;	author eb;	state Exp;
branches;
next	;


desc
@vim
@


1.26
log
@vim
@
text
@use feature 'say';

my @@span_tags = qw(source target percent report);
for my $tag (@@span_tags) {
    no strict 'refs';
    *$tag = sub {
        "<SPAN CLASS='$tag'>@@_</SPAN>";
      }
}

sub check_string_length {

# Compare string lengths.
# Add comparison of number of periods and commas. Suggest to user that target is missing or contains extra sentences! Also, count number of total words and compare.

    # Add word counting:

    my ( $source, $target, $results, $number ) = @@_;

    for ( my $i = 0 ; $i < @@{$number} ; $i++ ) {

        my $sourceWordC = () = $$source[$i] =~ /\S+/g;
        my $targetWordC = () = $$target[$i] =~ /\S+/g;

        my $sourceLength = length( $$source[$i] );
        my $targetLength = length( $$target[$i] );

        my $percent = sprintf( "%.f", $targetLength / $sourceLength * 100 );
        if ( $sourceLength > 25
            && ( $percent < 60 || $percent > 150 ) )
        {
            say "<p>Source: $$source[$i]<br>\nTarget: $$target[$i]<br>\n";
            say "Translation is $percent% of source\n</p>";

            $$results{"id=\"$$number[$i]\""}{length} = "$percent %";
        }
        if ( $targetWordC != 0 && $targetWordC != 0 ) {
            my $ratio = $targetWordC / $sourceWordC;
            if ( $ratio >= 1.5 ) {
                say
"<p>Source: $$source[$i]<br>\nTarget: $$target[$i]<br>\nThe target has "
                  . $ratio
                  . "x more words than source.</p>\n";
            }
        }
    }
}
1;
@


1.25
log
@vim
@
text
@d32 2
a33 2
            say "$$source[$i]<br>$$target[$i]\n\n";
            say "Translation is $percent% of source\n";
@


1.24
log
@vim
@
text
@d37 9
a45 5
        if ($targetWordC != 0 && $targetWordC != 0) {
        my $ratio = $targetWordC / $sourceWordC;
        if ( $ratio >= 1.5 ) {
            say "<p>Source: $$source[$i]<br>\nTarget: $$target[$i]<br>\nThe target has ".$ratio."x more words than source.</p>\n";
        }}
@


1.23
log
@vim
@
text
@d37 1
d41 1
a41 1
        }
@


1.22
log
@vim
@
text
@d39 1
a39 1
            say "Source: $$source[$i]<br>\nTarget: $$target[$i]<br>\nThe target has ".$ratio."x more words than source.\n";
@


1.21
log
@vim
@
text
@d39 1
a39 1
            say "Source: $$source[$i]\nTarget: $$target[$i]\nThe target has ".$ratio."x more words than source.\n";
@


1.20
log
@vim
@
text
@d39 1
a39 2
            say "Source: $$source[$i]\nTarget: $$target[$i]\n
             The target has ".$ratio."x more words than source.\n";
@


1.19
log
@vim
@
text
@d40 1
a40 1
             The target has "$ratio"x more words than source.\n";
@


1.18
log
@vim
@
text
@d40 1
a40 1
             The target has $ratio more words than source.\n";
@


1.17
log
@vim
@
text
@d1 2
@


1.16
log
@vim
@
text
@a0 2
use 5.20.1;

@


1.15
log
@vim
@
text
@d1 1
a1 1
use feature 'say';
@


1.14
log
@vim
@
text
@d42 3
a44 2
    }}
    1;
@


1.13
log
@vim
@
text
@d42 1
a42 1
    }
@


1.12
log
@vim
@
text
@d24 1
a24 1
        
d27 1
a27 1
        
d38 2
a39 2
        if ($ratio >= 1.5) {
        say "Source: $$source[$i]\nTarget: $$target[$i]\n
d41 1
d43 1
a43 2
}
1;
@


1.11
log
@vim
@
text
@d16 1
a16 3
# Add word counting:


d21 5
a25 4
            
    my $sourceWordC = () = $$source[$i] =~ /\S+/g;
    my $targetWordC = () = $$target[$i] =~ /\S+/g;
    my $sourceLength = length( $$source[$i] );
d27 1
d34 1
a34 1
        
d37 4
@


1.10
log
@vim
@
text
@d23 4
a26 2
    my $sourceWordC = () = $$source[$i] =~ /\S*
        my $sourceLength = length( $$source[$i] );
a31 1

d34 1
a34 1

@


1.9
log
@vim
@
text
@d16 4
d23 3
a25 2
        my $sourceLength = length( ${$source}[$i] );
        my $targetLength = length( ${$target}[$i] );
d31 1
a31 1
            say "$$source[$i]\n\n$$target[$i]\n\n";
d34 1
a34 1
            ${$results}{"id=\"${$number}[$i]\""}{length} = "$percent %";
@


1.8
log
@vim
@
text
@a2 1

d4 1
a4 1
for my $tag(@@span_tags) {
d8 1
a8 1
    }
d25 1
a25 1
            
@


1.7
log
@vim
@
text
@d3 9
@


1.6
log
@vim
@
text
@d18 1
a18 1
            say "${$source}[$i]\n\n$target\n\n";
a20 1
            #  print " Translation is $percent% of source\n";
@


1.5
log
@vim
@
text
@d1 1
a1 1
use 5.20.1;
d17 4
a20 1
            #  print "${$source}[$i]\n\n$target\n\n";
@


1.4
log
@vim
@
text
@d8 1
a8 1
    my ($source, $target, $results, $number) = @@_;
@


1.3
log
@vim
@
text
@d17 2
a18 2
            #  print "${$source}[$i] \n \n $target\n \n ";
            #  print " Translation is $percentShorter% of source \n ";
@


1.2
log
@vim
@
text
@a9 1
    # foreach my $i (@@number) {
@


1.1
log
@vim
@
text
@a9 2
    my $test = @@{$number};

d11 1
a11 1
    for ( my $i = 0 ; $i < scalar $test ; $i++ ) {
@
