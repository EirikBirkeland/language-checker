# TODO: Fix the other data/.pl files so that they add results to the hash properly.

#/usr/bin/perl
use strict;
use warnings;
use v5.20.1;
use Perl::Critic;
use File::stat;
use BSD::Resource;
use Switch;

# use re::engine::RE2;

# use Number::Fraction;
use utf8;
use XML::LibXML;
use Term::ANSIColor qw(:constants);

# use Data::Printer;

# require 'data/advanced.pl';
require 'data/advanced_optimized.pl';
require 'data/simple.pl';
require 'data/length.pl';
require 'data/untrans.pl';
require 'data/comma_imp.pl';
require 'data/verify_number_array.pl';

# Benchmark output
use Benchmark qw(:all);
my ( $starttime, $finishtime, $timespent );

# Color aliases
my $normal    = "\e[0m";
my $red       = "\e[4;31m";
my $red_bg    = "\e[7;31m";
my $red_under = "\e[4;41";
my $green     = "\e[1;32m";
my $yellow    = "\e[1;33m";
my $blue      = "\e[1;34m";

# Set output to utf8 for text files (globally?)
binmode( STDOUT, ":encoding(UTF-8)" );

# Open and parse XML
my $parser = XML::LibXML->new();
my $doc;
my $file = "combined.xlf";
if ( !defined $ARGV[0] ) {
    $doc = $parser->parse_file("$file");
    say "Argument missing, defaulting to combined .xlf:\n";
}
else {
    $doc  = $parser->parse_file( $ARGV[0] );
    $file = $ARGV[0];
}

# Change RLIMIT_STACK (ulimit -s) according to input file size, to hopefully avoid segmentation faults.
my $filesize    = stat("$file")->size;
my $ulimit_size = $filesize * 3;
setrlimit( RLIMIT_STACK, $ulimit_size, $ulimit_size );

# load regexes from data files
open( UNTRANS, "<:encoding(UTF-8)", "tests/untranslatables.txt" )
  or die("Can't open untranslatables.txt:!\n");
open( SIMPLE, "<:encoding( UTF- 8 )", "tests/simple.txt" )
  or die("Can't open simple.txt:!\n");
my @untransLines = <UNTRANS>;
my @simpleLines  = <SIMPLE>;
close UNTRANS;
close SIMPLE;

my %results = ();
$starttime = Benchmark->new;

select STDOUT;

# Apply operations to one <trans-unit> at a time.

# $starttime2 = Benchmark->new;

my ( $number, $source, $target );
my ( @number, @source, @target );

# Feed into arrays:
foreach my $TU ( $doc->findnodes('xliff/file/body/trans-unit') ) {

    # @translate = $TU->findvalue('./@translate');
    $number = $TU->findvalue('./@id');
    $source = $TU->findvalue('./source');
    $target = $TU->findvalue('./target');

    push( @number, $number );
    push( @source, $source );
    push( @target, $target );
}

#TODO if @number is not a perfect sequence,
#	warn user.

if ( !defined $ARGV[1] || $ARGV[1] =~ /1/ ) {
    run_simple_tests( \@simpleLines, \@target, \%results, \@number );
}

if ( !defined $ARGV[1] || $ARGV[1] =~ /2/ ) {
    check_string_length( \@source, \@target, \%results, \@number );
}

if ( !defined $ARGV[1] || $ARGV[1] =~ /3/ ) {

    run_advanced_tests( \@source, \@target, \%results, \@number );
}

if ( !defined $ARGV[1] || $ARGV[1] =~ /4/ ) {
    comma_imp( \@target, \%results, \@number );
}

if ( !defined $ARGV[1] || $ARGV[1] =~ /5/ ) {
    find_missing_untranslatables( \@untransLines, \@source, \@target,
        \%results, \@number );
}

if ( !defined $ARGV[1] || $ARGV[1] =~ /v/ ) {
    verify_ids( \@number );
}

# using Data::Printer
# select STDERR;
# p %results;

$finishtime = Benchmark->new;
$timespent = timediff( $finishtime, $starttime );
print "\n\nDone!\nSpent " . timestr($timespent);
print "\n\n";

# p @ARGV;

__END__

cmpthese(
    1,
    {
        simple =>
          run_simple_tests( \@simpleLines, \@target, \%results, \@number ),
        advanced => comma_imp( \@target, \%results, \@number )
    }
);

