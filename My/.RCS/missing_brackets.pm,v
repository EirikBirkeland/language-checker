head	1.94;
access;
symbols;
locks
	eb:1.94; strict;
comment	@# @;
expand	@o@;


1.94
date	2015.02.09.03.15.01;	author eb;	state Exp;
branches;
next	1.93;

1.93
date	2015.02.09.03.13.43;	author eb;	state Exp;
branches;
next	1.92;

1.92
date	2015.01.22.06.51.57;	author eb;	state Exp;
branches;
next	1.91;

1.91
date	2015.01.19.15.06.25;	author eb;	state Exp;
branches;
next	1.90;

1.90
date	2015.01.19.15.05.24;	author eb;	state Exp;
branches;
next	1.89;

1.89
date	2015.01.14.08.19.16;	author eb;	state Exp;
branches;
next	1.88;

1.88
date	2015.01.14.08.18.53;	author eb;	state Exp;
branches;
next	1.87;

1.87
date	2015.01.14.08.18.13;	author eb;	state Exp;
branches;
next	1.86;

1.86
date	2015.01.14.08.14.52;	author eb;	state Exp;
branches;
next	1.85;

1.85
date	2015.01.14.08.14.03;	author eb;	state Exp;
branches;
next	1.84;

1.84
date	2015.01.14.08.13.42;	author eb;	state Exp;
branches;
next	1.83;

1.83
date	2015.01.14.08.13.32;	author eb;	state Exp;
branches;
next	1.82;

1.82
date	2015.01.14.08.13.30;	author eb;	state Exp;
branches;
next	1.81;

1.81
date	2015.01.14.08.12.57;	author eb;	state Exp;
branches;
next	1.80;

1.80
date	2015.01.14.08.12.53;	author eb;	state Exp;
branches;
next	1.79;

1.79
date	2015.01.14.08.02.01;	author eb;	state Exp;
branches;
next	1.78;

1.78
date	2015.01.14.07.59.11;	author eb;	state Exp;
branches;
next	1.77;

1.77
date	2015.01.14.07.58.20;	author eb;	state Exp;
branches;
next	1.76;

1.76
date	2015.01.14.07.57.31;	author eb;	state Exp;
branches;
next	1.75;

1.75
date	2015.01.14.07.56.43;	author eb;	state Exp;
branches;
next	1.74;

1.74
date	2015.01.14.07.56.17;	author eb;	state Exp;
branches;
next	1.73;

1.73
date	2015.01.14.07.53.22;	author eb;	state Exp;
branches;
next	1.72;

1.72
date	2015.01.14.07.52.28;	author eb;	state Exp;
branches;
next	1.71;

1.71
date	2015.01.14.07.52.17;	author eb;	state Exp;
branches;
next	1.70;

1.70
date	2015.01.14.07.52.04;	author eb;	state Exp;
branches;
next	1.69;

1.69
date	2015.01.14.07.51.18;	author eb;	state Exp;
branches;
next	1.68;

1.68
date	2015.01.14.07.51.16;	author eb;	state Exp;
branches;
next	1.67;

1.67
date	2015.01.14.07.42.33;	author eb;	state Exp;
branches;
next	1.66;

1.66
date	2015.01.14.07.42.24;	author eb;	state Exp;
branches;
next	1.65;

1.65
date	2015.01.14.07.41.54;	author eb;	state Exp;
branches;
next	1.64;

1.64
date	2015.01.14.07.39.35;	author eb;	state Exp;
branches;
next	1.63;

1.63
date	2015.01.14.07.39.23;	author eb;	state Exp;
branches;
next	1.62;

1.62
date	2015.01.14.07.39.03;	author eb;	state Exp;
branches;
next	1.61;

1.61
date	2015.01.14.07.37.42;	author eb;	state Exp;
branches;
next	1.60;

1.60
date	2015.01.14.07.37.39;	author eb;	state Exp;
branches;
next	1.59;

1.59
date	2015.01.14.07.37.09;	author eb;	state Exp;
branches;
next	1.58;

1.58
date	2015.01.14.07.36.58;	author eb;	state Exp;
branches;
next	1.57;

1.57
date	2015.01.14.07.36.54;	author eb;	state Exp;
branches;
next	1.56;

1.56
date	2015.01.14.07.36.46;	author eb;	state Exp;
branches;
next	1.55;

1.55
date	2015.01.14.07.35.02;	author eb;	state Exp;
branches;
next	1.54;

1.54
date	2015.01.14.07.34.40;	author eb;	state Exp;
branches;
next	1.53;

1.53
date	2015.01.14.07.34.39;	author eb;	state Exp;
branches;
next	1.52;

1.52
date	2015.01.14.07.34.17;	author eb;	state Exp;
branches;
next	1.51;

1.51
date	2015.01.14.07.33.55;	author eb;	state Exp;
branches;
next	1.50;

1.50
date	2015.01.14.07.33.54;	author eb;	state Exp;
branches;
next	1.49;

1.49
date	2015.01.14.07.33.33;	author eb;	state Exp;
branches;
next	1.48;

1.48
date	2015.01.14.07.29.04;	author eb;	state Exp;
branches;
next	1.47;

1.47
date	2015.01.14.07.27.05;	author eb;	state Exp;
branches;
next	1.46;

1.46
date	2015.01.14.07.23.07;	author eb;	state Exp;
branches;
next	1.45;

1.45
date	2015.01.14.07.22.58;	author eb;	state Exp;
branches;
next	1.44;

1.44
date	2015.01.14.07.22.24;	author eb;	state Exp;
branches;
next	1.43;

1.43
date	2015.01.14.07.22.19;	author eb;	state Exp;
branches;
next	1.42;

1.42
date	2015.01.14.07.20.33;	author eb;	state Exp;
branches;
next	1.41;

1.41
date	2015.01.14.07.18.09;	author eb;	state Exp;
branches;
next	1.40;

1.40
date	2015.01.14.07.17.41;	author eb;	state Exp;
branches;
next	1.39;

1.39
date	2015.01.14.07.17.04;	author eb;	state Exp;
branches;
next	1.38;

1.38
date	2015.01.14.07.16.49;	author eb;	state Exp;
branches;
next	1.37;

1.37
date	2015.01.14.07.16.33;	author eb;	state Exp;
branches;
next	1.36;

1.36
date	2015.01.14.07.16.28;	author eb;	state Exp;
branches;
next	1.35;

1.35
date	2015.01.14.07.15.12;	author eb;	state Exp;
branches;
next	1.34;

1.34
date	2015.01.14.07.11.31;	author eb;	state Exp;
branches;
next	1.33;

1.33
date	2015.01.14.07.11.07;	author eb;	state Exp;
branches;
next	1.32;

1.32
date	2015.01.14.07.09.55;	author eb;	state Exp;
branches;
next	1.31;

1.31
date	2015.01.14.07.09.17;	author eb;	state Exp;
branches;
next	1.30;

1.30
date	2015.01.14.07.08.55;	author eb;	state Exp;
branches;
next	1.29;

1.29
date	2015.01.14.07.07.06;	author eb;	state Exp;
branches;
next	1.28;

1.28
date	2015.01.14.07.07.03;	author eb;	state Exp;
branches;
next	1.27;

1.27
date	2015.01.14.07.06.39;	author eb;	state Exp;
branches;
next	1.26;

1.26
date	2015.01.14.07.06.37;	author eb;	state Exp;
branches;
next	1.25;

1.25
date	2015.01.14.07.06.33;	author eb;	state Exp;
branches;
next	1.24;

1.24
date	2015.01.14.07.05.57;	author eb;	state Exp;
branches;
next	1.23;

1.23
date	2015.01.14.07.05.16;	author eb;	state Exp;
branches;
next	1.22;

1.22
date	2015.01.14.07.05.15;	author eb;	state Exp;
branches;
next	1.21;

1.21
date	2015.01.14.07.04.59;	author eb;	state Exp;
branches;
next	1.20;

1.20
date	2015.01.14.07.03.31;	author eb;	state Exp;
branches;
next	1.19;

1.19
date	2015.01.14.07.03.26;	author eb;	state Exp;
branches;
next	1.18;

1.18
date	2015.01.14.07.02.41;	author eb;	state Exp;
branches;
next	1.17;

1.17
date	2015.01.14.06.54.17;	author eb;	state Exp;
branches;
next	1.16;

1.16
date	2015.01.14.06.53.57;	author eb;	state Exp;
branches;
next	1.15;

1.15
date	2015.01.14.06.52.14;	author eb;	state Exp;
branches;
next	1.14;

1.14
date	2015.01.14.06.51.53;	author eb;	state Exp;
branches;
next	1.13;

1.13
date	2015.01.14.06.51.39;	author eb;	state Exp;
branches;
next	1.12;

1.12
date	2015.01.14.06.51.03;	author eb;	state Exp;
branches;
next	1.11;

1.11
date	2015.01.14.06.50.11;	author eb;	state Exp;
branches;
next	1.10;

1.10
date	2015.01.14.06.50.02;	author eb;	state Exp;
branches;
next	1.9;

1.9
date	2015.01.14.06.49.44;	author eb;	state Exp;
branches;
next	1.8;

1.8
date	2015.01.14.06.49.10;	author eb;	state Exp;
branches;
next	1.7;

1.7
date	2015.01.14.06.49.08;	author eb;	state Exp;
branches;
next	1.6;

1.6
date	2015.01.14.06.40.40;	author eb;	state Exp;
branches;
next	1.5;

1.5
date	2015.01.14.06.36.48;	author eb;	state Exp;
branches;
next	1.4;

1.4
date	2015.01.14.06.36.38;	author eb;	state Exp;
branches;
next	1.3;

1.3
date	2015.01.14.06.36.09;	author eb;	state Exp;
branches;
next	1.2;

1.2
date	2015.01.14.06.34.54;	author eb;	state Exp;
branches;
next	1.1;

1.1
date	2015.01.14.06.33.38;	author eb;	state Exp;
branches;
next	;


desc
@vim
@


1.94
log
@vim
@
text
@use 5.20.1;
use List::MoreUtils ':all';

sub missing_paren {

    my ( $source, $target, $results, $number ) = @@_;

    # Check for {}, (), []

    # These next 2 lines allow iterating through multiple arrays simultaneously.

# TODO: Must add support for 1), 2), 3), etc.

    my $ea = each_arrayref( $source, $target, $number );
    while ( my ( $source, $target, $number ) = $ea->() ) {

        if ( $source =~ /[\Q()[]{}\E]/ ) {

            my $count_paren    = () = $target =~ /[\Q()\E]/g;
            my $count_brackets = () = $target =~ /[\Q[]\E]/g;
            my $count_braces   = () = $target =~ /[\Q{}\E]/g;

            if ( $count_paren % 2 == 1 ) { # Add "If not match 1) 2) 3) or similar && ...)
                say "You have an uneven number of parenthesis.<br>";
            }
            if ( $count_brackets % 2 == 1 ) {
                say "You have an uneven number of brackets.<br>";
            }
            if ( $count_braces % 2 == 1 ) {
                say "You have an uneven number of braces.<br>";
            }
        }

# Compare source and target, enumerating missing or superfluous parenthesis symbols.
        if ( $source =~ /[\(\)]/ ) {    # if ( or ) in $source

            my $source_left_count  = () = $source =~ /\(/g;
            my $target_left_count  = () = $target =~ /\(/g;
            my $source_right_count = () = $source =~ /\)/g;
            my $target_right_count = () = $target =~ /\)/g;

            if ( $source_left_count != $target_left_count ) {
                say
"the source has $source_left_count, but target has $target_left_count left parenthesis (.<br>";
                $$results{"id=\"$number\""}{left_parentheses} += 1;
            }
            if ( $source_right_count != $target_right_count ) {
                say
"the source has $source_right_count, but target has $target_right_count right parenthesis ).<br>";
                $$results{"id=\"$number\""}{right_parentheses} += 1;
            }
        }
        if ( $source =~ /[\[\]]/ ) {    # if [ or ] in $source

            my $source_left_count  = () = $source =~ /\[/g;
            my $target_left_count  = () = $target =~ /\[/g;
            my $source_right_count = () = $source =~ /\]/g;
            my $target_right_count = () = $target =~ /\]/g;

            if ( $source_left_count != $target_left_count ) {
                say
"the source has $source_left_count, but target has $target_left_count left brackets (.<br>";
                $$results{"id=\"$number\""}{left_brackets} += 1;
            }
            if ( $source_right_count != $target_right_count ) {
                say
"the source has $source_right_count, but target has $target_right_count right brackets ).<br>";
                $$results{"id=\"$number\""}{right_brackets} += 1;
            }
        }

        if ( $source =~ /[\{\}]/ ) {    # if { or } in $source

            my $source_left_count  = () = $source =~ /\{/g;
            my $target_left_count  = () = $target =~ /\{/g;
            my $source_right_count = () = $source =~ /\}/g;
            my $target_right_count = () = $target =~ /\}/g;

            if ( $source_left_count != $target_left_count ) {
                say
"the source has $source_left_count, but target has $target_left_count left braces (.<br>";
                $$results{"id=\"$number\""}{left_braces} += 1;
            }
            if ( $source_right_count != $target_right_count ) {
                say
"the source has $source_right_count, but target has $target_right_count right braces ).<br>";
                $$results{"id=\"$number\""}{right_braces} += 1;
            }
        }
    }
}
1;
@


1.93
log
@vim
@
text
@d62 1
a62 1
"the source has $source_left_count, but target has $target_left_count left brackets (."<br>;
d67 1
a67 1
"the source has $source_right_count, but target has $target_right_count right brackets )."<br>;
d81 1
a81 1
"the source has $source_left_count, but target has $target_left_count left braces (."<br>;
d86 1
a86 1
"the source has $source_right_count, but target has $target_right_count right braces )."<br>;
@


1.92
log
@vim
@
text
@d24 1
a24 1
                say "You have an uneven number of parenthesis.";
d27 1
a27 1
                say "You have an uneven number of brackets.";
d30 1
a30 1
                say "You have an uneven number of braces.";
d44 1
a44 1
"the source has $source_left_count, but target has $target_left_count left parenthesis (.";
d49 1
a49 1
"the source has $source_right_count, but target has $target_right_count right parenthesis ).";
d62 1
a62 1
"the source has $source_left_count, but target has $target_left_count left brackets (.";
d67 1
a67 1
"the source has $source_right_count, but target has $target_right_count right brackets ).";
d81 1
a81 1
"the source has $source_left_count, but target has $target_left_count left braces (.";
d86 1
a86 1
"the source has $source_right_count, but target has $target_right_count right braces ).";
@


1.91
log
@vim
@
text
@a9 2
    my $num = 0 + @@$source;

@


1.90
log
@vim
@
text
@d25 1
a25 1
            if ( $count_paren % 2 == 1 ) {
@


1.89
log
@vim
@
text
@d14 2
@


1.88
log
@vim
@
text
@a21 1
say $count_paren, $count_brackets, $count_braces;
@


1.87
log
@vim
@
text
@d19 3
a21 3
            my $count_paren    = () = $source =~ /[\Q()\E]/g;
            my $count_brackets = () = $source =~ /[\Q[]\E]/g;
            my $count_braces   = () = $source =~ /[\Q{}\E]/g;
@


1.86
log
@vim
@
text
@d22 1
@


1.85
log
@vim
@
text
@d23 1
a23 1
            if ( $count_paren % 2 != 0 ) {
d26 1
a26 1
            if ( $count_brackets % 2 != 0 ) {
d29 1
a29 1
            if ( $count_braces % 2 != 0 ) {
@


1.84
log
@vim
@
text
@a90 3
## Please see file perltidy.ERR
## Please see file perltidy.ERR
}
@


1.83
log
@vim
@
text
@d29 1
a29 1
            if ( $count_bracer % 2 != 0 ) {
@


1.82
log
@vim
@
text
@d23 1
a23 1
            if ($count_paren % 2 != 0) {
d25 2
a26 2
              }
              if ($count_brackets % 2 != 0) {
d28 2
a29 2
              }
              if ($count_bracer % 2 != 0) {
d31 1
a31 1
              };
d91 1
@


1.81
log
@vim
@
text
@d23 1
a23 1
            if $count_paren % 2 != 0 {
d26 1
a26 1
              if $count_brackets % 2 != 0 {
d29 1
a29 1
              if $count_bracer % 2 != 0 {
@


1.80
log
@vim
@
text
@a13 1

d17 16
a32 1
     if ( $source =~ /[\Q()[]{}\E]/) {
a33 14
my $count_paren = () = $source =~ /[\Q()\E]/g;
my $count_brackets = () = $source =~ /[\Q[]\E]/g;
my $count_braces = () = $source =~ /[\Q{}\E]/g; 

if $count_paren % 2 != 0 {
say "You have an uneven number of parenthesis.";
}            
if $count_brackets % 2 != 0 {
say "You have an uneven number of brackets.";
}
if $count_bracer % 2 != 0 {
say "You have an uneven number of braces.";
}
}
d35 1
a35 1
if ( $source =~ /[\(\)]/ ) {    # if ( or ) in $source
d37 4
a40 4
                my $source_left_count  = () = $source =~ /\(/g;
                my $target_left_count  = () = $target =~ /\(/g;
                my $source_right_count = () = $source =~ /\)/g;
                my $target_right_count = () = $target =~ /\)/g;
d42 2
a43 2
                if ( $source_left_count != $target_left_count ) {
                    say
d45 4
a48 4
                    $$results{"id=\"$number\""}{left_parentheses} += 1;
                }
                if ( $source_right_count != $target_right_count ) {
                    say
d50 1
a50 2
                    $$results{"id=\"$number\""}{right_parentheses} += 1;
                }
d52 2
a53 1
            if ( $source =~ /[\[\]]/ ) {    # if [ or ] in $source
d55 4
a58 4
                my $source_left_count  = () = $source =~ /\[/g;
                my $target_left_count  = () = $target =~ /\[/g;
                my $source_right_count = () = $source =~ /\]/g;
                my $target_right_count = () = $target =~ /\]/g;
d60 2
a61 2
                if ( $source_left_count != $target_left_count ) {
                    say
d63 4
a66 4
                    $$results{"id=\"$number\""}{left_brackets} += 1;
                }
                if ( $source_right_count != $target_right_count ) {
                    say
d68 1
a68 2
                    $$results{"id=\"$number\""}{right_brackets} += 1;
                }
d70 1
d72 1
a72 1
            if ( $source =~ /[\{\}]/ ) {    # if { or } in $source
d74 4
a77 4
                my $source_left_count  = () = $source =~ /\{/g;
                my $target_left_count  = () = $target =~ /\{/g;
                my $source_right_count = () = $source =~ /\}/g;
                my $target_right_count = () = $target =~ /\}/g;
d79 2
a80 2
                if ( $source_left_count != $target_left_count ) {
                    say
d82 4
a85 4
                    $$results{"id=\"$number\""}{left_braces} += 1;
                }
                if ( $source_right_count != $target_right_count ) {
                    say
d87 1
a87 2
                    $$results{"id=\"$number\""}{right_braces} += 1;
                }
d91 2
@


1.79
log
@vim
@
text
@d13 2
d18 18
a35 2
        if ( $source =~ /[\Q()[]{}\E]/) {
            if ( $source =~ /[\(\)]/ ) {    # if ( or ) in $source
@


1.78
log
@vim
@
text
@d35 1
a35 1
            if ( $source =~ /[\[\]]/ ) {    # if ( or ) in $source
d54 1
a54 1
            if ( $source =~ /[\{\}]/ ) {    # if ( or ) in $source
@


1.77
log
@vim
@
text
@d16 1
a16 1
        if ( $source =~ /\Q[()[]{}]\E/ ) {
@


1.76
log
@vim
@
text
@d16 1
a16 1
        if ( $source =~ /[()[]{}]/ ) {
@


1.75
log
@vim
@
text
@d16 1
a16 1
        if ( $source =~ /\Q[()[]{}]\E/ ) {
@


1.74
log
@vim
@
text
@d16 2
a17 2
if ( $source =~ /\Q[()[]{}\E/) {
        if ( $source =~ /[\(\)]/ ) {    # if ( or ) in $source
d19 4
a22 4
            my $source_left_count  = () = $source =~ /\(/g;
            my $target_left_count  = () = $target =~ /\(/g;
            my $source_right_count = () = $source =~ /\)/g;
            my $target_right_count = () = $target =~ /\)/g;
d24 2
a25 2
            if ( $source_left_count != $target_left_count ) {
                say
d27 4
a30 4
                $$results{"id=\"$number\""}{left_parentheses} += 1;
            }
            if ( $source_right_count != $target_right_count ) {
                say
d32 2
a33 1
                $$results{"id=\"$number\""}{right_parentheses} += 1;
d35 1
a35 2
        }
        if ( $source =~ /[\[\]]/ ) {    # if ( or ) in $source
d37 4
a40 4
            my $source_left_count  = () = $source =~ /\[/g;
            my $target_left_count  = () = $target =~ /\[/g;
            my $source_right_count = () = $source =~ /\]/g;
            my $target_right_count = () = $target =~ /\]/g;
d42 2
a43 2
            if ( $source_left_count != $target_left_count ) {
                say
d45 4
a48 4
                $$results{"id=\"$number\""}{left_brackets} += 1;
            }
            if ( $source_right_count != $target_right_count ) {
                say
d50 2
a51 1
                $$results{"id=\"$number\""}{right_brackets} += 1;
a52 1
        }
d54 1
a54 1
        if ( $source =~ /[\{\}]/ ) {    # if ( or ) in $source
d56 4
a59 4
            my $source_left_count  = () = $source =~ /\{/g;
            my $target_left_count  = () = $target =~ /\{/g;
            my $source_right_count = () = $source =~ /\}/g;
            my $target_right_count = () = $target =~ /\}/g;
d61 2
a62 2
            if ( $source_left_count != $target_left_count ) {
                say
d64 4
a67 4
                $$results{"id=\"$number\""}{left_braces} += 1;
            }
            if ( $source_right_count != $target_right_count ) {
                say
d69 2
a70 1
                $$results{"id=\"$number\""}{right_braces} += 1;
d73 1
a73 2
}   
 }
@


1.73
log
@vim
@
text
@d16 1
d72 2
a73 1
    }
@


1.72
log
@vim
@
text
@a70 1

@


1.71
log
@vim
@
text
@d53 1
a53 1
        if ( $source =~ /[\{\}/ ) {    # if ( or ) in $source
@


1.70
log
@vim
@
text
@d53 1
a53 1
        if ( $source =~ /[\{\)}/ ) {    # if ( or ) in $source
@


1.69
log
@vim
@
text
@d67 2
a68 2
"the source has $source_right_count, but target has $target_right_count right parenthesis ).";
                $$results{"id=\"$number\""}{right_brackets} += 1;
@


1.68
log
@vim
@
text
@d34 1
a34 1
if ( $source =~ /[\[\]]/ ) {    # if ( or ) in $source
d53 1
a53 1
 if ( $source =~ /[\{\)}/ ) {    # if ( or ) in $source
d72 1
a72 1
}
@


1.67
log
@vim
@
text
@d26 1
a26 1
$$results{"id=\"$number\""}{left_parentheses} += 1;
d31 1
a31 1
$$results{"id=\"$number\""}{right_parentheses} += 1;
d34 39
a72 1
    }
@


1.66
log
@vim
@
text
@d31 1
a31 1
$$results{"id=\"$number\"}{right_parentheses} += 1;
@


1.65
log
@vim
@
text
@d26 1
a26 1
$$results{"id=\"$number\"}{left_parentheses} += 1;
@


1.64
log
@vim
@
text
@d26 1
d31 1
@


1.63
log
@vim
@
text
@d18 2
a19 2
            my $source_left_count  = () = $source =~ {\(}g;
            my $target_left_count  = () = $target =~ {\(}g;
@


1.62
log
@vim
@
text
@d18 2
a19 2
            my $source_left_count  = () = $source =~ $\($g;
            my $target_left_count  = () = $target =~ $\($g;
@


1.61
log
@vim
@
text
@d18 2
a19 2
            my $source_left_count  = () = $source =~ /\(/g;
            my $target_left_count  = () = $target =~ /\(/g;
@


1.60
log
@vim
@
text
@d29 1
a29 1
"the source has $source_right_count, but target has $target_right_count right parenthesis ). ";
@


1.59
log
@vim
@
text
@d28 2
a29 3
                say "the source has $source_right_count, but target has $target_right_count right parenthesis )

                  . ";
@


1.58
log
@vim
@
text
@d28 2
a29 3
                say
                 "the source has $source_right_count,
                  but target has $target_right_count right parenthesis )
@


1.57
log
@vim
@
text
@d29 1
a29 1
                 " the source has $source_right_count,
@


1.56
log
@vim
@
text
@d29 3
a31 2

the source has $source_right_count, but target has $target_right_count right parenthesis ).";
@


1.55
log
@vim
@
text
@a23 1

d28 1
d30 1
a30 2
                say
"the source has $source_right_count, but target has $target_right_count right parenthesis ).";
@


1.54
log
@vim
@
text
@d31 1
a31 1
"the source has $source_right_count, but target has $target_right_count right parenthesis (.";
@


1.53
log
@vim
@
text
@d18 4
a21 4
my            $source_left_count  = () = $source =~ /\(/g;
  my          $target_left_count  = () = $target =~ /\(/g;
    my        $source_right_count = () = $source =~ /\)/g;
      my      $target_right_count = () = $target =~ /\)/g;
@


1.52
log
@vim
@
text
@d18 4
a21 4
            $source_left_count  = () = $source =~ /\(/g;
            $target_left_count  = () = $target =~ /\(/g;
            $source_right_count = () = $source =~ /\)/g;
            $target_right_count = () = $target =~ /\)/g;
@


1.51
log
@vim
@
text
@a27 1

a32 1

a34 1

@


1.50
log
@vim
@
text
@d23 1
a23 1
            if ($source_left_count != $target_left_count){
d27 1
a27 1
              }
d29 1
a29 1
              if ($source_right_count != $target_right_count){
d33 1
a33 1
              }
@


1.49
log
@vim
@
text
@d16 1
a16 1
        if ($source =~ /[\(\)]/) { # if ( or ) in $source
d18 4
a21 4
        $source_left_count = () = $source =~ /\(/g;
        $target_left_count = () = $target =~ /\(/g;
        $source_right_count = () = $source =~/\)/g;
$target_right_count = () = $target =~/\)/g;
d23 1
a23 1
if $source_left_count != $target_left_count {
d25 3
a27 2
say "the source has $source_left_count, but target has $target_left_count left parenthesis (.";
}
d29 1
a29 1
if $source_right_count != $target_right_count {
d31 3
a33 2
say "the source has $source_right_count, but target has $target_right_count right parenthesis (.";
}
d35 1
a35 3


        };
@


1.48
log
@vim
@
text
@d11 2
a12 1
# These next 2 lines allow iterating through multiple arrays simultaneously.
a14 2
    
    if $source =~ /[\(\)]/ {
d16 1
d18 4
d23 1
d25 2
d28 1
d30 2
d35 1
a35 1
}
@


1.47
log
@vim
@
text
@d11 1
a11 1

d14 5
a18 1
                
a20 1
        }
d22 4
d27 2
@


1.46
log
@vim
@
text
@d14 1
a14 8
        if ( $source =~ /([\[\{\(])/ ) {
            my $left = quotemeta($1);
            my $counterpart;
            given ($left) {
                when (/\(/) { $counterpart = quotemeta(")") }
                when (/\[/) { $counterpart = quotemeta("]") }
                when (/\{/) { $counterpart = quotemeta("}") }
            }
a15 14
            if ( $source =~ (/$left/) ) {

                my $count_source = () = $source =~ /$left/g;
                $count_source += () = $source =~ /$counterpart/g;

                my $count_target = () = $target =~ /$left/g;
                $count_target += () = $target =~ /$counterpart/g;

                if ( $count_target != $count_source ) {
                    say
"Segment $number contains a different number of parenthesis $1$counterpart in target. I.e., source contains $count_source of $1 and $counterpart, and target contains $count_target of $1 and $counterpart.";
                }

            }
a19 3

}

@


1.45
log
@vim
@
text
@d23 1
a23 1
            if ( $source =~ (/$left/ ) {
@


1.44
log
@vim
@
text
@d23 1
a23 1
            if ( $source =~ (/\Q$left\E/) ) {
@


1.43
log
@vim
@
text
@d16 1
a16 1
            my $
@


1.42
log
@vim
@
text
@d15 2
a16 2
            my $left = $1;
            my $;
d18 3
a20 3
                when (/\(/) { $counterpart = ")" }
                when (/\[/) { $counterpart = "]" }
                when (/\{/) { $counterpart = "}" }
d25 2
a26 2
                my $count_source = () = $source =~ quotemeta /$left/g;
                $count_source += () = $source =~ quotemeta /$counterpart/g;
d28 2
a29 2
                my $count_target = () = $target =~ quotemeta /$left/g;
                $count_target += () = $target =~ quotemeta /$counterpart/g;
@


1.41
log
@vim
@
text
@d15 3
a17 2
            my $counterpart;
            given ($1) {
d23 1
a23 1
            if ( $source =~ (/\Q$1\E/) ) {
d25 2
a26 2
                my $count_source = () = $source =~ /$1/g;
                $count_source += () = $source =~ /\Q$counterpart\E/g;
d28 2
a29 2
                my $count_target = () = $target =~ /$1/g;
                $count_target += () = $target =~ /\Q$counterpart\E/g;
d33 1
a33 1
"Segment $number contains a different number of parenthesis () in target. I.e., source contains $count_source of $1 and $counterpart, and target contains $count_target of $1 and $counterpart.";
@


1.40
log
@vim
@
text
@d25 1
a25 1
                $count_source += () = $source =~ /$counterpart/g;
d28 1
a28 1
                $count_target += () = $target =~ /$counterpart/g;
@


1.39
log
@vim
@
text
@d22 1
a22 2
            if (
                $source =~ (/$1/)) {
d24 2
a25 2
                    my $count_source = () = $source =~ /$1/g;
                      $count_source += () = $source =~ /$counterpart/g;
d27 2
a28 2
                      my $count_target = () = $target =~ /$1/g;
                      $count_target += () = $target =~ /$counterpart/g;
d30 2
a31 2
                      if ( $count_target != $count_source ) {
                        say
a32 2
                    }

d41 3
a43 1
    1;
@


1.38
log
@vim
@
text
@d22 2
a23 1
            if ( $source =~ (/$1/) {
d25 2
a26 2
                my $count_source = () = $source =~ /$1/g;
                $count_source += () = $source =~ /$counterpart/g;
d28 2
a29 2
                my $count_target = () = $target =~ /$1/g;
                $count_target += () = $target =~ /$counterpart/g;
d31 2
a32 2
                if ( $count_target != $count_source ) {
                    say
d34 2
d44 1
a44 3
}

1;
@


1.37
log
@vim
@
text
@d22 1
a22 1
            if ( $source =~ (/$1/) ) {
@


1.36
log
@vim
@
text
@a32 1

@


1.35
log
@vim
@
text
@d15 6
a20 7
my $counterpart;
given ($1){
when (/\(/) { $counterpart = ")"}
when (/\[/) { $counterpart = "]"}
when (/\{/) { $counterpart = "}"} 
}

d25 1
a25 1
                $count_source += () = $source =~ /\)/g;
d28 1
a28 1
                $count_target += () = $target =~ /\)/g;
d32 1
a32 1
"Segment $number contains a different number of parenthesis () in target. I.e., source contains $count_source parenthesis, and target contains $count_target parenthesis.";
@


1.34
log
@vim
@
text
@d15 6
a21 1
            if ( $source =~ (/\(/) ) {
d23 3
a25 1
                my $count_source = () = $source =~ /\(/g;
d28 1
a28 1
                my $count_target = () = $target =~ /\(/g;
@


1.33
log
@vim
@
text
@a13 1
say ($source, "\n", $target, "\n", $number);
@


1.32
log
@vim
@
text
@d23 1
a23 1
                $count_target += () = $source =~ /\)/g;
@


1.31
log
@vim
@
text
@d14 1
a14 1
say ($source, $target, $number);
@


1.30
log
@vim
@
text
@d14 1
a14 1

@


1.29
log
@vim
@
text
@d17 1
a17 1
            if ( $1 =~ (/\(/) ) {
@


1.28
log
@vim
@
text
@d17 1
a17 1
            if ($1 =~ (/\(/)) {
d20 1
a20 1
                  $count_source += () = $source =~ /\)/g;
d22 2
a23 2
                  my $count_target = () = $target =~ /\(/g;
                  $count_target += () = $source =~ /\)/g;
d25 1
a25 1
                  if ( $count_target != $count_source ) {
d31 1
a31 1
              }
@


1.27
log
@vim
@
text
@d17 1
a17 2
            if (
                $1 =~ (/\(/) \{
d19 2
a20 2
                    my $count_source = () = $source =~ /\(/g;
                      $count_source += () = $source =~ /\)/g;
d22 2
a23 2
                      my $count_target = () = $target =~ /\(/g;
                      $count_target += () = $source =~ /\)/g;
d25 2
a26 2
                      if ( $count_target != $count_source ) {
                        say
a28 2
                    }

d31 1
a31 2
## Please see file perltidy.ERR
            }
d37 3
a39 1
    1;
@


1.26
log
@vim
@
text
@d17 2
a18 1
            if ($1 =~ (/\(/)\ {
d20 2
a21 2
                my $count_source = () = $source =~ /\(/g;
                  $count_source += () = $source =~ /\)/g;
d23 2
a24 2
                  my $count_target = () = $target =~ /\(/g;
                  $count_target += () = $source =~ /\)/g;
d26 2
a27 2
                  if ( $count_target != $count_source ) {
                    say
d30 2
d34 2
a35 1
              }
d41 1
a41 3
}

1;
@


1.25
log
@vim
@
text
@d17 1
a17 1
            if ($1 =~ (/\(/)) {
@


1.24
log
@vim
@
text
@d17 1
a17 2
## Please see file perltidy.ERR
            if $1 =~ (/\(/) {
@


1.23
log
@vim
@
text
@d15 1
a15 1
        if ( my $match = $source =~ /([\[\{\(])/ ) {
d18 1
a18 1
            if $match =~ (/\(/) {
@


1.22
log
@vim
@
text
@d17 2
a18 1
                if $match =~ (/\(/) {
d20 2
a21 2
                    my $count_source = () = $source =~ /\(/g;
                    $count_source += () = $source =~ /\)/g;
d23 2
a24 2
                    my $count_target = () = $target =~ /\(/g;
                    $count_target += () = $source =~ /\)/g;
d26 2
a27 2
                    if ( $count_target != $count_source ) {
                        say
a29 2
                    }

d32 1
a32 1
            }
d37 2
@


1.21
log
@vim
@
text
@d38 1
a38 1
}
@


1.20
log
@vim
@
text
@d17 1
a17 2
            given ($match) {
                when (/\(/) {
@


1.19
log
@vim
@
text
@d38 3
a40 2
    }}
    1;
@


1.18
log
@vim
@
text
@d15 1
a15 1
        if (my $match = $source =~ /([\[\{\(])/) {
d17 2
a18 2
given ($match) {
when ( /\(/ ) {
d20 2
a21 2
my $count_source = () = $source =~ /\(/g;
$count_source += () = $source =~ /\)/g;
d23 2
a24 2
my $count_target = () = $target =~ /\(/g;
$count_target += () = $source =~ /\)/g;
d26 3
a28 2
if ( $count_target != $count_source){
say "Segment $number contains a different number of parenthesis () in target. I.e., source contains $count_source parenthesis, and target contains $count_target parenthesis.";
d30 1
a30 1
}
d32 1
d34 1
a34 1
}
d36 1
a36 1
          }
d38 2
a39 4
    }

}
1;
@


1.17
log
@vim
@
text
@d15 1
a15 1
        if ($source =~ /([\[\{\(])/) {
d17 16
a32 1
            say "segment has a $1";
@


1.16
log
@vim
@
text
@d15 1
a15 1
        if ($source =~ /[\[\{\(]/) {
@


1.15
log
@vim
@
text
@d15 1
a15 1
        if ($source =~ /Google/) {
d17 1
a17 1
            say "segment has a $&";
@


1.14
log
@vim
@
text
@d15 1
a15 1
        if ($source =~ /([a])/) {
@


1.13
log
@vim
@
text
@d17 1
a17 1
            say "segment has a $1";
@


1.12
log
@vim
@
text
@d2 1
a2 1
use List::MoreUtils;
@


1.11
log
@vim
@
text
@d2 1
@


1.10
log
@vim
@
text
@d23 1
@


1.9
log
@vim
@
text
@d14 1
a14 1
        if $source =~ /([a])/ {
@


1.8
log
@vim
@
text
@d14 1
a14 1
        if $source =~ /([\{\(\[])/ {
@


1.7
log
@vim
@
text
@d11 2
a12 2
my $ea = each_arrayref($source, $target, $number);
while ( my ($source, $target, $number) = $ea->()) {
@


1.6
log
@vim
@
text
@a7 2
    
my $num = 0 + @@$source;
d9 1
a9 1
    for ( my $i = 0 ; $i < scalar $num ; $i++ ) {
d11 4
a14 1
        if $$source[$i] =~ /([\\{\(\[])/ {
@


1.5
log
@vim
@
text
@d8 2
a9 1
my $num = 0+@@$source;
@


1.4
log
@vim
@
text
@d8 1
a8 1
my $num = 0+@@$number;
@


1.3
log
@vim
@
text
@d2 1
d8 1
d10 1
a10 1
    for ( my $i = 0 ; $i < scalar $test ; $i++ ) {
d13 1
a13 1
        
a14 2


@


1.2
log
@vim
@
text
@d1 1
d10 3
a12 1
if $$source[$i] =~ quotemeta /{([/ {
d16 1
a16 6



}


@


1.1
log
@vim
@
text
@d3 8
a10 1
my ($source, $target, $results, $number) = @@_;
a11 1
# Check for {}, (), []
a12 1
for ( my $i = 0; $i < scalar $test; $i++) {
d17 4
@
